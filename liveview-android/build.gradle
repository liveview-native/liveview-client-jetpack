plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'io.github.takahirom.roborazzi'
}

android {
    compileSdk compile_sdk_version

    defaultConfig {
        minSdk min_sdk_version
        targetSdk target_sdk_version

        testInstrumentationRunner instrumentation_runner_class
        testApplicationId "org.phoenixframework.liveview.android.test"

        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // Runnning screenshot tests
    // Recording the image references
    // ./gradlew recordRoborazziDebug -PisRecordingShotTest=true
    // Testing
    // ./gradlew verifyRoborazziDebug
    // This param must be passed via command line in order to generated the reference images for
    // screen shot tests.
    buildTypes.each{
        it.buildConfigField 'boolean', 'IS_RECORDING_SHOT_TEST', isRecordingShotTest
    }

    compileOptions {
        sourceCompatibility source_compatibility_version
        targetCompatibility target_compatibility_version
    }
    kotlinOptions {
        jvmTarget = jvm_target_version
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion kotlin_compiler_ext_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    namespace 'org.phoenixframework.liveview'
}

dependencies {
    // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
    implementation platform("androidx.compose:compose-bom:$compose_bom_version")
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.material:material-icons-core"
    implementation "androidx.compose.material:material-icons-extended"
    implementation "androidx.compose.material3:material3:$material_design_3_version"
    implementation "androidx.compose.ui:ui-text-google-fonts:$google_fonts_version"

    implementation "androidx.activity:activity-compose:$activity_compose_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecyle_version"

    implementation "com.google.code.gson:gson:$gson_version"

    // These dependencies are exported to consumers, that is to say found on their compile classpath.
    api "androidx.core:core-ktx:$core_ktx_version"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecyle_version"
    api "androidx.navigation:navigation-compose:$navigation_compose_version"

    api "com.github.dsrees:JavaPhoenixClient:$java_phoenix_client_version"
    api "com.google.guava:guava:$guava_version"
    api "com.github.liveview-native:liveview-native-core-jetpack:$liveview_native_core_jetpack_version"

    api "org.apache.commons:commons-math3:$commons_math_version"
    api "org.apache.commons:commons-text:$commons_text_version"
    api "org.jetbrains.kotlinx:kotlinx-collections-immutable:$kotlin_immutable_collections_version"
    api "org.jsoup:jsoup:$jsoup_version"

    api "io.coil-kt:coil:$coil_version"
    api "io.coil-kt:coil-compose:$coil_version"
    api "io.coil-kt:coil-svg:$coil_version"

    testImplementation "junit:junit:$junit_version"
    testImplementation "androidx.test.ext:junit:$ext_junit_version"
    testImplementation "androidx.compose.ui:ui-test-junit4-android:$ui_test_junit_version"

    testImplementation "io.coil-kt:coil-test:$coil_version"

    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "io.github.takahirom.roborazzi:roborazzi:$roborazzi_version"
    testImplementation "io.github.takahirom.roborazzi:roborazzi-compose:$roborazzi_version"
    testImplementation "io.github.takahirom.roborazzi:roborazzi-junit-rule:$roborazzi_version"
}

// ./gradlew assembleRelease -PcomposeCompilerReports=true
// Run the command above in order to generate the compose stability diagnose report.
// https://developer.android.com/jetpack/compose/performance/stability/diagnose
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        if (project.findProperty("composeCompilerReports") == "true") {
            freeCompilerArgs += [
                    "-P",
                    "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=" +
                            project.buildDir.absolutePath + "/compose_compiler"
            ]
        }
        if (project.findProperty("composeCompilerMetrics") == "true") {
            freeCompilerArgs += [
                    "-P",
                    "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination=" +
                            project.buildDir.absolutePath + "/compose_compiler"
            ]
        }
    }
}

// TODO The Core-Jetpack project only generates the native platform library files for the
//  following architectures (arm, arm64, x86, and x86_64). In order to run the tests in the local
//  machine, we need the library for the host machine. For now, this file is being generated by
//  adding the "darwin-aarch64" (or "darwin-x86-64" for Intel Macbooks) target, and running the
//  following command in the Core-Jetpack project: `./gradlew assembleRelease`.
//  The library files are generated at "core/build/rustJniLibs/desktop" directory. The ideal
//  solution is release a dependency just for unit tests and declare at the `dependencies` section
//  above like:
//  `testImplementation "com.github.liveview-native:liveview-native-core-jetpack-host:<version>"`
// Configuring Java Lib Path in order to find the native library before running the Unit Tests
tasks.withType(Test).configureEach {
    doFirst {
        def jniLibsForDesktopDir = file("${projectDir}/src/test/jniLibs")
        def archTypesSubdirs = jniLibsForDesktopDir.listFiles()
        for (File dir in archTypesSubdirs) {
            // Selecting the proper JNI lib file for run the unit tests
            // in according to the architecture. e.g.: darwin-aarch64, darwin-x86-64
            def arch = System.getProperty("os.arch").replace("_", "-")
            if (dir.isDirectory() && dir.name.contains(arch)) {
                systemProperty("java.library.path", dir.getAbsolutePath())
                break
            }
        }
    }
}